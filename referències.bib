
@misc{stoykov_environment_nodate,
	title = {Environment variables {\textbar} {Grafana} k6 documentation},
	url = {https://grafana.com/docs/k6/latest/using-k6/environment-variables/},
	abstract = {You can access any environment variables from your k6 script code and use this to supply your VUs with configuration information.},
	language = {en},
	urldate = {2024-09-04},
	journal = {Grafana Labs},
	author = {Stoykov, Mihail},
	keywords = {Annexos},
}

@misc{grafana_results_nodate,
	title = {Results output {\textbar} {Grafana} k6 documentation},
	url = {https://grafana.com/docs/k6/latest/get-started/results-output/},
	abstract = {For basic tests, the top-level summary that k6 provides might be enough. For detailed analysis, you can stream all data your test outputs to an external source.},
	language = {en},
	urldate = {2024-09-03},
	journal = {Grafana Labs},
	author = {Grafana, Labs},
	keywords = {Annexos},
}

@misc{weiner_psi_2018,
	title = {{PSI} - {Pressure} {Stall} {Information} — {The} {Linux} {Kernel} documentation},
	shorttitle = {{PSI}},
	url = {https://docs.kernel.org/accounting/psi.html},
	language = {English},
	urldate = {2024-09-03},
	author = {Weiner, Johannes},
	month = apr,
	year = {2018},
	keywords = {Annexos},
}

@misc{noauthor_pressure_2024,
	title = {Pressure {Stall} {Information} {\textbar} {Learn} {Netdata}},
	url = {https://learn.netdata.cloud/docs/collecting-metrics/linux-systems/pressure/pressure-stall-information},
	abstract = {Plugin: proc.plugin},
	language = {en},
	urldate = {2024-09-03},
	month = aug,
	year = {2024},
	keywords = {Annexos},
}

@article{spinellis_package_2012,
	title = {Package {Management} {Systems}},
	volume = {29},
	issn = {1937-4194},
	url = {https://ieeexplore.ieee.org/document/6155145/?arnumber=6155145},
	doi = {10.1109/MS.2012.38},
	abstract = {A package management system organizes and simplifies the installation and maintenance of software by standardizing and organizing the production and consumption of software collections. As a software developer, you can benefit from package managers in two ways: through a rich and stable development environment and through friction-free reuse. Promisingly, the structure that package managers bring both to the tools we use in our development process and the libraries we reuse in our products ties nicely with the recent move emphasizing DevOps (development operations) as an integration between software development and IT operations.},
	number = {2},
	urldate = {2024-09-03},
	journal = {IEEE Software},
	author = {Spinellis, Diomidis},
	month = mar,
	year = {2012},
	note = {Conference Name: IEEE Software},
	keywords = {DevOps, Maintenance engineering, Product management, Software libraries, Software reusability, module dependencies, package management system, shared library, software reuse},
	pages = {84--86},
}

@misc{morel_creating_2019,
	title = {Creating a {Linux} service with systemd},
	url = {https://medium.com/@benmorel/creating-a-linux-service-with-systemd-611b5c8b91d6},
	abstract = {While writing web applications, I often need to offload compute-heavy tasks to an asynchronous worker script, schedule tasks for later, or…},
	language = {en},
	urldate = {2024-09-03},
	journal = {Medium},
	author = {Morel, Benjamin},
	month = may,
	year = {2019},
}

@misc{both_systemd_2024,
	title = {systemd — \#1: {Learning} to love systemd},
	shorttitle = {systemd — \#1},
	url = {https://www.both.org/?p=3822},
	abstract = {systemd is the mother of all processes, responsible for bringing the Linux host up to a state where productive work can be done.},
	language = {en-US},
	urldate = {2024-09-03},
	journal = {Both.org},
	author = {Both, David},
	month = sep,
	year = {2024},
}

@article{dean_tail_2013,
	title = {The tail at scale},
	volume = {56},
	issn = {0001-0782, 1557-7317},
	url = {https://dl.acm.org/doi/10.1145/2408776.2408794},
	doi = {10.1145/2408776.2408794},
	abstract = {Software techniques that tolerate latency variability are vital to building responsive large-scale Web services.},
	language = {en},
	number = {2},
	urldate = {2024-09-03},
	journal = {Communications of the ACM},
	author = {Dean, Jeffrey and Barroso, Luiz André},
	month = feb,
	year = {2013},
	pages = {74--80},
}

@article{alchangian_introduction_2023,
	title = {Introduction to goroutines in {Go}},
	url = {https://openarchive.nure.ua/handle/document/24710},
	abstract = {This work is devoted to goroutines in Go, which are a key feature of the language for providing parallel programming. They are easy to use and efficient, making them a powerful tool for developers who want to take advantage of parallel programming. This article explains what goroutines are and how they can be created and used in Go. It also explains all the advantages of using goroutines. In addition to explaining the basics of goroutines, this article will also cover some practical examples of how to use goroutines in real-world scenarios. This article serves as a useful introduction to Goroutines for programmers who want to learn parallel programming in Go.},
	language = {en},
	urldate = {2024-09-03},
	author = {Alchangian, O. A.},
	year = {2023},
}

@book{nemirovsky_multithreading_2022,
	title = {Multithreading {Architecture}},
	isbn = {978-3-031-01738-4},
	abstract = {Multithreaded architectures now appear across the entire range of computing devices, from the highest-performing general purpose devices to low-end embedded processors. Multithreading enables a processor core to more effectively utilize its computational resources, as a stall in one thread need not cause execution resources to be idle. This enables the computer architect to maximize performance within area constraints, power constraints, or energy constraints. However, the architectural options for the processor designer or architect looking to implement multithreading are quite extensive and varied, as evidenced not only by the research literature but also by the variety of commercial implementations. This book introduces the basic concepts of multithreading, describes a number of models of multithreading, and then develops the three classic models (coarse-grain, fine-grain, and simultaneous multithreading) in greater detail. It describes a wide variety of architectural and software design tradeoffs, as well as opportunities specific to multithreading architectures. Finally, it details a number of important commercial and academic hardware implementations of multithreading. Table of Contents: Introduction / Multithreaded Execution Models / Coarse-Grain Multithreading / Fine-Grain Multithreading / Simultaneous Multithreading / Managing Contention / New Opportunities for Multithreaded Processors / Experimentation and Metrics / Implementations of Multithreaded Processors / Conclusion},
	language = {en},
	publisher = {Springer Nature},
	author = {Nemirovsky, Mario and Tullsen, Dean},
	month = may,
	year = {2022},
	note = {Google-Books-ID: SYZyEAAAQBAJ},
	keywords = {Computers / Computer Architecture, Technology \& Engineering / Electrical, Technology \& Engineering / Electronics / Circuits / General},
}

@techreport{its_processes_nodate,
	title = {Processes and {Threads}},
	url = {https://www.cs.huji.ac.il/course/2010/os/notes/notes2.pdf},
	urldate = {2024-09-03},
	institution = {The Hebrew University of Jerusalem},
	author = {Its, CPU},
}

@book{rash_linux_2007,
	title = {Linux {Firewalls}: {Attack} {Detection} and {Response}},
	isbn = {978-1-59327-141-1},
	shorttitle = {Linux {Firewalls}},
	abstract = {System administrators need to stay ahead of new security vulnerabilities that leave their networks exposed every day. A firewall and an intrusion detection systems (IDS) are two important weapons in that fight, enabling you to proactively deny access and monitor network traffic for signs of an attack.Linux Firewalls discusses the technical details of the iptables firewall and the Netfilter framework that are built into the Linux kernel, and it explains how they provide strong filtering, Network Address Translation (NAT), state tracking, and application layer inspection capabilities that rival many commercial tools. You'll learn how to deploy iptables as an IDS with psad and fwsnort and how to build a strong, passive authentication layer around iptables with fwknop.Concrete examples illustrate concepts such as firewall log analysis and policies, passive network authentication and authorization, exploit packet traces, Snort ruleset emulation, and more with coverage of these topics:–Passive network authentication and OS fingerprinting–iptables log analysis and policies–Application layer attack detection with the iptables string match extension–Building an iptables ruleset that emulates a Snort ruleset–Port knocking vs. Single Packet Authorization (SPA)–Tools for visualizing iptables logsPerl and C code snippets offer practical examples that will help you to maximize your deployment of Linux firewalls. If you're responsible for keeping a network secure, you'll find Linux Firewalls invaluable in your attempt to understand attacks and use iptables—along with psad and fwsnort—to detect and even prevent compromises.},
	language = {en},
	publisher = {No Starch Press},
	author = {Rash, Michael},
	month = sep,
	year = {2007},
	note = {Google-Books-ID: Ad9Fnk9C7QsC},
	keywords = {Computers / Internet / Online Safety \& Privacy, Computers / Operating Systems / Linux, Computers / Security / Network Security},
}

@book{benvenuti_understanding_2005,
	title = {Understanding {Linux} {Network} {Internals}: {Guided} {Tour} to {Networking} on {Linux}},
	isbn = {978-0-596-55206-0},
	shorttitle = {Understanding {Linux} {Network} {Internals}},
	abstract = {If you've ever wondered how Linux carries out the complicated tasks assigned to it by the IP protocols -- or if you just want to learn about modern networking through real-life examples -- Understanding Linux Network Internals is for you.Like the popular O'Reilly book, Understanding the Linux Kernel, this book clearly explains the underlying concepts and teaches you how to follow the actual C code that implements it. Although some background in the TCP/IP protocols is helpful, you can learn a great deal from this text about the protocols themselves and their uses. And if you already have a base knowledge of C, you can use the book's code walkthroughs to figure out exactly what this sophisticated part of the Linux kernel is doing.Part of the difficulty in understanding networks -- and implementing them -- is that the tasks are broken up and performed at many different times by different pieces of code. One of the strengths of this book is to integrate the pieces and reveal the relationships between far-flung functions and data structures. Understanding Linux Network Internals is both a big-picture discussion and a no-nonsense guide to the details of Linux networking. Topics include:Key problems with networkingNetwork interface card (NIC) device driversSystem initializationLayer 2 (link-layer) tasks and implementationLayer 3 (IPv4) tasks and implementationNeighbor infrastructure and protocols (ARP)BridgingRoutingICMPAuthor Christian Benvenuti, an operating system designer specializing in networking, explains much more than how Linux code works. He shows the purposes of major networking features and the trade-offs involved in choosing one solution over another. A large number of flowcharts and other diagrams enhance the book's understandability.},
	language = {en},
	publisher = {"O'Reilly Media, Inc."},
	author = {Benvenuti, Christian},
	month = dec,
	year = {2005},
	note = {Google-Books-ID: yy7tihZLgGYC},
	keywords = {Computers / General, Computers / Hardware / General, Computers / Human-Computer Interaction (HCI), Computers / Operating Systems / General, Computers / Operating Systems / Linux, Computers / Operating Systems / UNIX, Computers / Reference, Computers / Software Development \& Engineering / General},
}

@article{wu_transition_2013,
	title = {Transition from {IPv4} to {IPv6}: {A} {State}-of-the-{Art} {Survey}},
	volume = {15},
	issn = {1553-877X},
	shorttitle = {Transition from {IPv4} to {IPv6}},
	url = {https://ieeexplore.ieee.org/document/6380492/?arnumber=6380492},
	doi = {10.1109/SURV.2012.110112.00200},
	abstract = {In the process of Internet evolution, the transition from IPv4 to IPv6 has become inevitable and fairly urgent. IANA (Internet Assigned Numbers Authority) has finally exhausted the global IPv4 address space, which leaves the community no choice but pushes forward the IPv6 transition process. IPv4 and IPv6 networks both will exist during the transition period, while the two are not compatible in nature. Therefore it is indispensable to maintain the availability, as well as to provide the inter-communication ability of IPv4 and IPv6. Years ago a series of transition techniques were actually proposed. However, because of their technical immatureness, they failed to cover the solution space well. Some of these techniques were even obsoleted by IETF due to their flaws. This paper reconsiders the basic problems and key difficulties in IPv4-IPv6 transition, and introduces the principles of tunneling and translation techniques. Then the paper surveys the mainstream tunneling and translation mechanisms raised since 1998, especially the new mechanisms proposed recently, capturing the aspects of technical principles, pros and cons, scenarios and applicability. Recommendations on mechanism selection for different scenarios are provided. Moreover, the paper looks into the characteristics and transition requirements of practical ISP networks, and proposes the usage and deployment strategy of the transition mechanisms in both backbone and edge networks.},
	number = {3},
	urldate = {2024-09-03},
	journal = {IEEE Communications Surveys \& Tutorials},
	author = {Wu, Peng and Cui, Yong and Wu, Jianping and Liu, Jiangchuan and Metz, Chris},
	year = {2013},
	note = {Conference Name: IEEE Communications Surveys \& Tutorials},
	keywords = {IP networks, IPv6 transition, Internet, Protocols, Routing, Scalability, Security, Tunneling, heterogeneous addressing, heterogeneous network connectivity, translation, tunneling},
	pages = {1407--1424},
}

@book{hunt_tcpip_2002,
	title = {{TCP}/{IP} {Network} {Administration}},
	isbn = {978-0-596-00297-8},
	abstract = {This complete guide to setting up and running a TCP/IP network is essential for network administrators, and invaluable for users of home systems that access the Internet. The book starts with the fundamentals -- what protocols do and how they work, how addresses and routing are used to move data through the network, how to set up your network connection -- and then covers, in detail, everything you need to know to exchange information via the Internet. Included are discussions on advanced routing protocols (RIPv2, OSPF, and BGP) and the gated software package that implements them, a tutorial on configuring important network services -- including DNS, Apache, sendmail, Samba, PPP, and DHCP -- as well as expanded chapters on troubleshooting and security. TCP/IP Network Administration is also a command and syntax reference for important packages such as gated, pppd, named, dhcpd, and sendmail. With coverage that includes Linux, Solaris, BSD, and System V TCP/IP implementations, the third edition contains: Overview of TCP/IP Delivering the data Network services Getting startedM Basic configuration Configuring the interface Configuring routing Configuring DNS Configuring network servers Configuring sendmail Configuring Apache Network security Troubleshooting Appendices include dip, ppd, and chat reference, a gated reference, a dhcpd reference, and a sendmail reference This new edition includes ways of configuring Samba to provide file and print sharing on networks that integrate Unix and Windows, and a new chapter is dedicated to the important task of configuring the Apache web server. Coverage of network security now includes details on OpenSSH, stunnel, gpg, iptables, and the access control mechanism in xinetd. Plus, the book offers updated information about DNS, including details on BIND 8 and BIND 9, the role of classless IP addressing and network prefixes, and the changing role of registrars. Without a doubt, TCP/IP Network Administration, 3rd Edition is a must-have for all network administrators and anyone who deals with a network that transmits data over the Internet.},
	language = {en},
	publisher = {"O'Reilly Media, Inc."},
	author = {Hunt, Craig},
	year = {2002},
	note = {Google-Books-ID: wqabAgAAQBAJ},
	keywords = {Computers / Computer Science, Computers / Internet / General, Computers / Networking / General, Computers / Networking / Intranets \& Extranets, Computers / Networking / Network Protocols, Computers / Programming / General},
}

@misc{noauthor_install_2024,
	title = {Install {Netdata} with kickstart.sh {\textbar} {Learn} {Netdata}},
	url = {https://learn.netdata.cloud/docs/netdata-agent/installation/linux/},
	abstract = {The kickstart.sh script installs Netdata from source, including all dependencies required to connect to Netdata Cloud, with a single command.},
	language = {en},
	urldate = {2024-09-03},
	month = aug,
	year = {2024},
	keywords = {Annexos},
}

@misc{noauthor_netdata_nodate,
	title = {Netdata - {ArchWiki}},
	url = {https://wiki.archlinux.org/title/Netdata},
	urldate = {2024-09-03},
	keywords = {Annexos},
}

@misc{stoykov_why_nodate,
	title = {Why k6 does not support multiple scripting languages?},
	url = {https://k6.io/blog/why-k6-does-not-introduce-multiple-scripting-languages},
	abstract = {At k6 we regularly get a request to support other programming languages in addition to JavaScript. Go developers would like to write test scripts in Go, Java developers migrating from jMeter would like to write tests in Java.},
	language = {en},
	urldate = {2024-09-01},
	author = {Stoykov, Mihail and Suwala, Pawel},
	keywords = {Annexos},
}

@misc{noauthor_vpc_nodate,
	title = {{VPC} networks},
	url = {https://cloud.google.com/vpc/docs/vpc},
	language = {en},
	urldate = {2024-09-01},
	journal = {Google Cloud},
	keywords = {Annexos},
}

@misc{noauthor_publishing_0100,
	title = {Publishing and exposing ports},
	url = {https://docs.docker.com/get-started/docker-concepts/running-containers/publishing-ports/},
	abstract = {This concept page will teach you the significance of publishing and exposing ports in Docker},
	language = {en},
	urldate = {2024-09-01},
	journal = {Docker Documentation},
	year = {0100},
	keywords = {Annexos},
}

@misc{noauthor_running_nodate,
	title = {Running k6 {\textbar} {Grafana} k6 documentation},
	url = {https://grafana.com/docs/k6/latest/get-started/running-k6/},
	abstract = {Follow along to learn how to run a test, add virtual users, increase the test duration, and ramp the number of requests up and down as the test runs.},
	language = {en},
	urldate = {2024-09-01},
	journal = {Grafana Labs},
	keywords = {Annexos},
}

@misc{noauthor_how_nodate,
	title = {How to {Download} and {Install} {JMeter} for {Windows}?},
	url = {https://www.simplilearn.com/tutorials/jmeter-tutorial/jmeter-installation},
	abstract = {Download and install JMeter on the latest windows version in simple and easy steps. Check out this tutorial to get Jmeter on your system at the earliest!},
	language = {en-US},
	urldate = {2024-09-01},
	journal = {Simplilearn.com},
	keywords = {Annexos},
}

@misc{noauthor_hoppscotch_nodate,
	title = {Hoppscotch},
	url = {https://docs.hoppscotch.io/},
	abstract = {Open-source API development ecosystem.},
	language = {en},
	urldate = {2024-09-01},
	journal = {Hoppscotch Documentation},
	keywords = {Annexos},
}

@misc{noauthor_uncomplicated_nodate,
	title = {Uncomplicated {Firewall} - {ArchWiki}},
	url = {https://wiki.archlinux.org/title/Uncomplicated_Firewall},
	urldate = {2024-09-01},
	keywords = {Annexos},
}

@misc{noauthor_make_2022,
	title = {Make {APIs} {Fun}},
	url = {https://web.archive.org/web/20220404034929/http://make-apis-fun.com/},
	urldate = {2024-09-01},
	month = apr,
	year = {2022},
	keywords = {Annexos},
}

@misc{mousset_pierre-alexandre35travian_2024,
	title = {Pierre-{Alexandre35}/travian},
	copyright = {MIT},
	url = {https://github.com/Pierre-Alexandre35/travian},
	abstract = {Persistent, browser-based, massively multiplayer, online real-time strategy game},
	urldate = {2024-09-01},
	author = {Mousset, Pierre-Alexandre},
	month = aug,
	year = {2024},
	note = {original-date: 2022-03-19T11:02:30Z},
	keywords = {Annexos, browser-game, full-stack, game, travian, travian-clone},
}

@incollection{wang_websocket_2013,
	address = {Berkeley, CA},
	title = {The {WebSocket} {Protocol}},
	isbn = {978-1-4302-4741-8},
	url = {https://doi.org/10.1007/978-1-4302-4741-8_3},
	abstract = {WebSocket is a network protocol that defines how servers and clients communicate over the Web. Protocols are agreed-upon rules for communication. The suite of protocols that comprise the Internet is published by the IETF, the Internet Engineering Task Force. The IETF publishes Requests for Comments, called RFCs, which precisely specify protocols, including RFC 6455: The WebSocket Protocol. RFC 6455 was published in December 2011 and contains the exact rules that must be followed when implementing a WebSocket client or server.},
	language = {en},
	urldate = {2024-09-01},
	booktitle = {The {Definitive} {Guide} to {HTML5} {WebSocket}},
	publisher = {Apress},
	author = {Wang, Vanessa and Salim, Frank and Moskovits, Peter},
	editor = {Wang, Vanessa and Salim, Frank and Moskovits, Peter},
	year = {2013},
	doi = {10.1007/978-1-4302-4741-8_3},
	pages = {33--60},
}

@misc{noauthor_fnattepizza-tribes_nodate,
	title = {fnatte/pizza-tribes: {Pizza} {Tribes} is a multiplayer persistent browser-based clicker real-time strategy game. {The} gameplay is a combination of a clicker game and a real-time strategy game.},
	url = {https://github.com/fnatte/pizza-tribes},
	urldate = {2024-09-01},
	keywords = {Annexos},
}

@misc{enders_timdenderscolonization-conquerors_2024,
	title = {Timdenders/{Colonization}-{Conquerors}},
	url = {https://github.com/Timdenders/Colonization-Conquerors},
	abstract = {A completed project focused on the development of a game that replicates the gameplay of the classic 1982 game, Utopia.},
	urldate = {2024-08-31},
	author = {Enders, Timothy D.},
	month = aug,
	year = {2024},
	note = {original-date: 2023-09-08T17:54:51Z},
	keywords = {2d-game, Annexos, city-builder, college-project, game, game-development, gdscript, godot, godot-engine, multiplayer, strategy-game, video-game},
}

@misc{noauthor_make-apis-funmake-apis-fun_2024,
	title = {make-apis-fun/make-apis-fun},
	copyright = {GPL-3.0},
	url = {https://github.com/make-apis-fun/make-apis-fun},
	abstract = {Welcome to the "Make APIs fun" project. This repository contains a set of APIs to play classic board games using just REST requests.},
	urldate = {2024-08-30},
	publisher = {Make APIs fun},
	month = mar,
	year = {2024},
	note = {original-date: 2020-06-19T08:33:13Z},
	keywords = {Annexos, api, game, game-development, onlinegames, rest, rest-api, rest-api-game},
}

@misc{noauthor_make-apis-fungamesclue-apireadmemd_nodate,
	title = {make-apis-fun/games/clue-api/{README}.md at master · make-apis-fun/make-apis-fun},
	url = {https://github.com/make-apis-fun/make-apis-fun/blob/master/games/clue-api/README.md},
	abstract = {Welcome to the "Make APIs fun" project. This repository contains a set of APIs to play classic board games using just REST requests. - make-apis-fun/make-apis-fun},
	language = {en},
	urldate = {2024-08-29},
	journal = {GitHub},
	keywords = {Annexos},
}

@inproceedings{richter_multi-perspective_2016,
	address = {Santa Monica California USA},
	title = {A {Multi}-perspective {Analysis} of {Carrier}-{Grade} {NAT} {Deployment}},
	isbn = {978-1-4503-4526-2},
	url = {https://dl.acm.org/doi/10.1145/2987443.2987474},
	doi = {10.1145/2987443.2987474},
	language = {en},
	urldate = {2024-08-29},
	booktitle = {Proceedings of the 2016 {Internet} {Measurement} {Conference}},
	publisher = {ACM},
	author = {Richter, Philipp and Wohlfart, Florian and Vallina-Rodriguez, Narseo and Allman, Mark and Bush, Randy and Feldmann, Anja and Kreibich, Christian and Weaver, Nicholas and Paxson, Vern},
	month = nov,
	year = {2016},
	pages = {215--229},
}

@misc{p_bezos_amazon-com-inc-2023-shareholder-letter_2024,
	type = {Annual reports, proxies and shareholder letters},
	title = {Amazon-com-{Inc}-2023-{Shareholder}-{Letter}},
	url = {https://s2.q4cdn.com/299287126/files/doc_financials/2024/ar/Amazon-com-Inc-2023-Shareholder-Letter.pdf},
	urldate = {2024-08-17},
	journal = {2023 Annual Report(opens in new window)},
	author = {P. Bezos, Jeffrey},
	year = {2024},
}

@article{bashari_rad_introduction_2017,
	title = {An {Introduction} to {Docker} and {Analysis} of its {Performance}},
	volume = {173},
	abstract = {Docker provide some facilities, which are useful for developers and administrators. It is an open platform can be used for building, distributing, and running applications in a portable, lightweight runtime and packaging tool, known as Docker Engine. It also provide Docker Hub, which is a cloud service for sharing applications. Costs can be reduced by replacing traditional virtual machine with docker container. It excellently reduces the cost of rebuilding the cloud development platform.},
	journal = {IJCSNS International Journal of Computer Science and Network Security},
	author = {Bashari Rad, Babak and Bhatti, Harrison and Ahmadi, Mohammad},
	month = mar,
	year = {2017},
	pages = {8},
}

@article{singh_bottleneck_2012,
	title = {Bottleneck {Occurrence} in {Cloud} {Computing}},
	language = {en},
	author = {Singh, Balvinder and Nain, Priya},
	year = {2012},
}

@inproceedings{qian_cloud_2009,
	title = {Cloud {Computing}: {An} {Overview}},
	volume = {5931},
	isbn = {978-3-642-10664-4},
	shorttitle = {Cloud {Computing}},
	doi = {10.1007/978-3-642-10665-1_63},
	abstract = {In order to support the maximum number of user and elastic service with the minimum resource, the Internet service provider invented the cloud computing. within a few years, emerging cloud computing has became the hottest technology. From the publication of core papers by Google since 2003 to the commercialization of Amazon EC2 in 2006, and to the service offering of AT\&T Synaptic Hosting, the cloud computing has been evolved from internal IT system to public service, from cost-saving tools to revenue generator, and from ISP to telecom. This paper introduces the concept, history, pros and cons of cloud computing as well as the value chain and standardization effort.},
	author = {Qian, Ling and Luo, Zhiguo and Du, Yujian and Guo, Leitao},
	month = jan,
	year = {2009},
	pages = {626--631},
}

@inproceedings{li_design_2011,
	title = {Design and {Describe} {REST} {API} without {Violating} {REST}: {A} {Petri} {Net} {Based} {Approach}},
	shorttitle = {Design and {Describe} {REST} {API} without {Violating} {REST}},
	url = {https://ieeexplore.ieee.org/abstract/document/6009431},
	doi = {10.1109/ICWS.2011.54},
	abstract = {As REST architectural style gains popularity in the web service community, there is a growing concern and debate on how to design Restful web services (REST API) in a proper way. We attribute this problem to lack of a standard model and language to describe a REST API that respects all the REST constraints. As a result, many web services that claim to be REST API are not hypermedia driven as prescribed by REST. This situation may lead to REST APIs that are not as scalable, extensible, and interoperable as promised by REST. To address this issue, this paper proposes REST Chart as a model and language to design and describe REST API without violating the REST constraints. REST Chart models a REST API as a special type of Colored Petri Net whose topology defines the REST API and whose token markings define the representational state space of user agents using that API. We demonstrate REST Chart with an example REST API. We also show how REST Chart can support efficient content negotiation and reuse hybrid representations to broaden design choices. Furthermore, we argue that the REST constraints, such as hypermedia driven and statelessness, can either be enforced naturally or checked automatically in REST Chart.},
	urldate = {2024-08-19},
	booktitle = {2011 {IEEE} {International} {Conference} on {Web} {Services}},
	author = {Li, Li and Chou, Wu},
	month = jul,
	year = {2011},
	keywords = {HTML, Media, Petri Net, Protocols, REST Chart, RESTful web service, Servers, Unified modeling language, Web services, XML},
	pages = {508--515},
}

@article{merkel_docker_nodate,
	title = {Docker: {Lightweight} {Linux} {Containers} for {Consistent} {Development} and {Deployment}},
	abstract = {Take on “dependency hell” with Docker containers, the lightweight and nimble cousin of VMs. Learn how Docker makes applications portable and isolated by packaging them in containers based on LXC technology.},
	language = {en},
	author = {Merkel, Dirk},
}

@inproceedings{liang_evolution_2022,
	title = {Evolution of {Firewalls}: {Toward} {Securer} {Network} {Using} {Next} {Generation} {Firewall}},
	shorttitle = {Evolution of {Firewalls}},
	url = {https://ieeexplore.ieee.org/document/9720435/?arnumber=9720435},
	doi = {10.1109/CCWC54503.2022.9720435},
	abstract = {The Internet was not created with security provisions and, as a result, many security protocols and devices were added later. Firewall is an essential device that gives the basic protection to the networks and devices connected to the Internet. The first generation firewalls were adopted in the early 1980s and operated based on a set of simple rules that controlled the network traffic between the Internet and the local network. Then over the years, firewalls have evolved into many different kinds to provide better protections. However, traditional firewalls are not catching up with the evolving threats, and the industry is rapidly adopting the Next-Generation Firewall (NGFW) that offer higher performance, better protection, and simplicity. This paper will review the evolution of the traditional firewalls, the need for NGFW, its features, and the industrial adoption trends. We will also review how NGFW can support emerging machine learning algorithms and better protect IoT systems.},
	urldate = {2024-08-29},
	booktitle = {2022 {IEEE} 12th {Annual} {Computing} and {Communication} {Workshop} and {Conference} ({CCWC})},
	author = {Liang, Junyan and Kim, Yoohwan},
	month = jan,
	year = {2022},
	keywords = {Conferences, Cyber Security, Deep Packet Inspection, Firewall, Firewalls (computing), IPS, Inspection, Internet, Market research, NGFW, Network Threats, Protocols, Telecommunication traffic},
	pages = {0752--0759},
}

@article{wen_clientserver_1998,
	title = {From client/server to intranet},
	volume = {6},
	issn = {0968-5227},
	url = {https://doi.org/10.1108/09685229810207407},
	doi = {10.1108/09685229810207407},
	abstract = {An intranet puts a new layer into a client/server (C/S) architecture, the Web server, which acts as the gateway to the application logic and data. It is three‐tier computing, where these functions are performed on separate servers. The servers store everything and perform the bulk of the querying and the data presentation. Although there is great potential using an intranet to develop applications, there are certain challenges, including: security, privacy, currency, and performance. There is progress with security but performance with high volume transaction processing is still unproved. There have been a lot of mistakes with C/S and the danger here is to go down the same road with the intranet. To avoid this, this study explores the managerial and technical issues involved in developing a corporate intranet. Inspired with the success of Internet, intranet is proved to be an extension of and an enhancement to C/S. Client/server is not dead just as the mainframe is not dead; but the C/S model is being changed by the intranet.},
	number = {1},
	urldate = {2024-08-16},
	journal = {Information Management \& Computer Security},
	author = {Wen, H. Joseph},
	month = jan,
	year = {1998},
	note = {Publisher: MCB UP Ltd},
	keywords = {Client‐server computing, Information systems, Internet},
	pages = {15--20},
}

@article{wing_network_2010,
	title = {Network {Address} {Translation}: {Extending} the {Internet} {Address} {Space}},
	volume = {14},
	issn = {1941-0131},
	shorttitle = {Network {Address} {Translation}},
	url = {https://ieeexplore.ieee.org/document/5496805/?arnumber=5496805},
	doi = {10.1109/MIC.2010.96},
	abstract = {Network Address Translation (NAT) and Network Address and Port Translation (NAPT) are widely used to separate networks and share IPv4 addresses. They're valuable tools for network administrators and help with the imminent exhaustion of IPv4 address space and the transition to IPv6. This article surveys recent standardization efforts in this area.},
	number = {4},
	urldate = {2024-08-29},
	journal = {IEEE Internet Computing},
	author = {Wing, Dan},
	month = jul,
	year = {2010},
	note = {Conference Name: IEEE Internet Computing},
	keywords = {IP networks, IPv4, IPv6, IPv6 transition, NAT, NAT44, NAT64, Network Address Translation, Network address translation, Standardization, translation},
	pages = {66--70},
}

@book{simpson_you_2015,
	title = {You {Don}'t {Know} {JS}: {ES6} \& {Beyond}},
	isbn = {978-1-4919-0526-5},
	shorttitle = {You {Don}'t {Know} {JS}},
	abstract = {No matter how much experience you have with JavaScript, odds are you don’t fully understand the language. As part of the "You Don’t Know JS" series, this compact guide focuses on new features available in ECMAScript 6 (ES6), the latest version of the standard upon which JavaScript is built.Like other books in this series, You Don’t Know JS: ES6 \& Beyond dives into trickier parts of the language that many JavaScript programmers either avoid or know nothing about. Armed with this knowledge, you can achieve true JavaScript mastery.With this book, you will:Learn new ES6 syntax that eases the pain points of common programming idiomsOrganize code with iterators, generators, modules, and classesExpress async flow control with Promises combined with generatorsUse collections to work more efficiently with data in structured waysLeverage new API helpers, including Array, Object, Math, Number, and StringExtend your program’s capabilities through meta programmingPreview features likely coming to JS beyond ES6},
	language = {en},
	publisher = {"O'Reilly Media, Inc."},
	author = {Simpson, Kyle},
	month = dec,
	year = {2015},
	note = {Google-Books-ID: rec6CwAAQBAJ},
	keywords = {Computers / Internet / Web Programming, Computers / Languages / JavaScript, Computers / Programming / Open Source},
}

@inproceedings{rodriguez_rest_2016,
	title = {{REST} {APIs}: {A} {Large}-{Scale} {Analysis} of {Compliance} with {Principles} and {Best} {Practices}},
	isbn = {978-3-319-38790-1},
	shorttitle = {{REST} {APIs}},
	doi = {10.1007/978-3-319-38791-8_2},
	abstract = {Quickly and dominantly, REST APIs have spread over the Web and percolated into modern software development practice, especially in the Mobile Internet where they conveniently enable offloading data and computations onto cloud services. We analyze more than 78 GB of HTTP traffic collected by Italy’s biggest Mobile Internet provider over one full day and study how big the trend is in practice, how it changed the traffic that is generated by applications, and how REST APIs are implemented in practice. The analysis provides insight into the compliance of state-of-the-art APIs with theoretical Web engineering principles and guidelines, knowledge that affects how applications should be developed to be scalable and robust. The perspective is that of the Mobile Internet.},
	author = {Rodriguez, Carlos and Baez, Marcos and Daniel, Florian and Casati, Fabio and Trabucco, Juan and Canali, Luigi and Percannella, Gianraffaele},
	month = jun,
	year = {2016},
	pages = {21--39},
}

@article{khan_systematic_2024,
	title = {Systematic analysis of software development in cloud computing perceptions},
	volume = {36},
	copyright = {© 2022 The Authors. Journal of Software: Evolution and Process published by John Wiley \& Sons Ltd.},
	issn = {2047-7481},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.2485},
	doi = {10.1002/smr.2485},
	abstract = {Cloud computing is characterized as a shared computing and communication infrastructure. It encourages the efficient and effective developmental processes that are carried out in various organizations. Cloud computing offers both possibilities and solutions of problems for outsourcing and management of software developmental operations across distinct geography. Cloud computing is adopted by organizations and application developers for developing quality software. The cloud has the significant impact on utilizing the artificial complexity required in developing and designing quality software. Software developmental organization prefers cloud computing for outsourcing tasks because of its available and scalable nature. Cloud computing is the ideal choice utilized for development modern software as they have provided a completely new way of developing real-time cost-effective, efficient, and quality software. Tenants (providers, developers, and consumers) are provided with platforms, software services, and infrastructure based on pay per use phenomenon. Cloud-based software services are becoming increasingly popular, as observed by their widespread use. Cloud computing approach has drawn the interest of researchers and business because of its ability to provide a flexible and resourceful platform for development and deployment. To determine a cohesive understanding of the analyzed problems and solutions to improve the quality of software, the existing literature resources on cloud-based software development should be analyzed and synthesized systematically. Keyword strings were formulated for analyzing relevant research articles from journals, book chapters, and conference papers. The research articles published in (2011–2021) various scientific databases were extracted and analyzed for retrieval of relevant research articles. A total of 97 research publications are examined in this SLR and are evaluated to be appropriate studies in explaining and discussing the proposed topic. The major emphasis of the presented systematic literature review (SLR) is to identify the participating entities of cloud-based software development, challenges associated with adopting cloud for software developmental processes, and its significance to software industries and developers. This SLR will assist organizations, designers, and developers to develop and deploy user-friendly, efficient, effective, and real time software applications.},
	language = {en},
	number = {2},
	urldate = {2024-08-16},
	journal = {Journal of Software: Evolution and Process},
	author = {Khan, Habib Ullah and Ali, Farhad and Nazir, Shah},
	year = {2024},
	note = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.2485},
	keywords = {CC, cloud computing, cloud deployment, cloud development, cloud-based software, software engineering},
	pages = {e2485},
}
